% \VignetteIndexEntry{Some interesting graphics}
% \VignetteDepends{circlize}
% \VignetteKeywords{circos R}
% \VignetteKeywords{circlize}
% \VignettePackage{circlize}

\documentclass{article}

\title{Some interesting graphics}

\author{Zuguang Gu {\tt <z.gu@dkfz.de>}}
\usepackage[margin=1in, a4paper]{geometry}

\usepackage{Sweave}
\usepackage{hyperref}
\begin{document}

\maketitle 

{\it circlize} package can be used to draw some rather interesting
graphics.

The first one is a clock. The key function here is {\tt circos.axis} (figure \ref{fig:clock}).
The whole circle only contains one sector in which major tick at 0 is overlapping with major tick at 12.
The two arrows are drawn in the canvas coordinate. An example of a real-time clock is in {\tt Examples} section of
the help page of {\tt circos.axis}.

\begin{figure}
\begin{center}
<<label=figclock, fig = TRUE, echo=FALSE, results=hide>>=
library(circlize)
factors = "a"  # any name is fine
par(mar = c(1, 1, 1, 1))
circos.par(gap.degree = 0, cell.padding = c(0, 0, 0, 0), start.degree = 90)
circos.initialize(factors = factors, xlim = c(0, 12))
circos.trackPlotRegion(factors = factors, ylim = c(0, 1), bg.border = NA)
circos.axis(sector.index = "a", major.at = 0:12, labels = "",
    direction = "inside", labels.cex = 1.5, major.tick.percentage = 0.3)
circos.text(1:12, rep(0.5, 12), 1:12, facing = "downward")
arrows(0, 0, 0, 0.7)    
arrows(0, 0, 0.4, 0)

circos.clear()
@
\end{center}
\caption{A clock}
\label{fig:clock}
\end{figure}


<<label=figclock, echo=TRUE, eval=FALSE>>=
library(circlize)
factors = "a"  # any name is fine
par(mar = c(1, 1, 1, 1))
circos.par(gap.degree = 0, cell.padding = c(0, 0, 0, 0), start.degree = 90)
circos.initialize(factors = factors, xlim = c(0, 12))
circos.trackPlotRegion(factors = factors, ylim = c(0, 1), bg.border = NA)
circos.axis(sector.index = "a", major.at = 0:12, labels = "",
    direction = "inside", labels.cex = 1.5, major.tick.percentage = 0.3)
circos.text(1:12, rep(0.5, 12), 1:12, facing = "downward")
arrows(0, 0, 0, 0.7)    
arrows(0, 0, 0.4, 0)

circos.clear()
@


The second example is a dartboard. In the figure, tracks are assigned with different height and each cell is initialized with
different colors (figure \ref{fig:dartboard}). The most inside green ring and red circle are drawn by {\tt draw.sector}.
<<label=figdartboard, echo=TRUE, eval=FALSE>>=
library(circlize)
factors = 1:20
par(mar = c(1, 1, 1, 1))
circos.par(gap.degree = 0, cell.padding = c(0, 0, 0, 0),
    start.degree = 360/40, track.margin = c(0, 0), clock.wise = FALSE)
circos.initialize(factors = factors, xlim = c(0, 1))
circos.trackPlotRegion(ylim = c(0, 1), factors = factors, bg.col = "black",
    track.height = 0.15)
circos.trackText(rep(0.5, 20), rep(0.5, 20),
    labels = c(13, 4, 18, 1, 20, 5, 12, 9, 14, 11, 8, 16, 7, 19, 3, 17, 2, 15, 10, 6),
    factors = factors, col = "#EEEEEE", font = 2,
    facing = "downward")
circos.trackPlotRegion(ylim = c(0, 1), factors = factors,
    bg.col = rep(c("#E41A1C", "#4DAF4A"), 10), bg.border = "#EEEEEE", 
    track.height = 0.05)
circos.trackPlotRegion(ylim = c(0, 1), factors = factors,
    bg.col = rep(c("black", "white"), 10), bg.border = "#EEEEEE", 
    track.height = 0.275)
circos.trackPlotRegion(ylim = c(0, 1), factors = factors,
    bg.col = rep(c("#E41A1C", "#4DAF4A"), 10), bg.border = "#EEEEEE",
    track.height = 0.05)
circos.trackPlotRegion(ylim = c(0, 1), factors = factors, 
    bg.col = rep(c("black", "white"), 10), bg.border = "#EEEEEE",
    track.height = 0.375)
draw.sector(center = c(0, 0), start.degree = 0, end.degree = 360,
    rou1 = 0.1, col = "#4DAF4A", border = "#EEEEEE")
draw.sector(center = c(0, 0), start.degree = 0, end.degree = 360,
    rou1 = 0.05, col = "#E41A1C", border = "#EEEEEE")

circos.clear()
@

\begin{figure}[h!]
\begin{center}
<<label=figdartboard, fig = TRUE, echo = FALSE, results=hide>>=
<<figdartboard>>
@
\end{center}
\caption{A dartboard}
\label{fig:dartboard}
\end{figure}


The third example is Ba-gua (\url{https://en.wikipedia.org/wiki/Ba_gua}). The
key functions are {\tt circos.rect} and {\tt draw.sector} (figure \ref{fig:bagua}). 

Ba-gua is originated from about several thousands years ago in China. It is the source of almost all ancient
Chinese philosophy. It abstracts the rule of universe into base signs (i.e. - - which is called Yang and {\tt -} which is called Ying).
And combination of the two basic signs generates the whole system of the universe.

Inside Ba-gua, these is the Tai-ji. Tai-ji refers to the most original state at the creation
of the universe. In ancient Chinese philosophy system, at the very beginning, the whole world
is a huge mass of air (chaos). Then the lighter air floated up and created sky while heavier air sinked down
and created ground. The upper world is called Yang and the bottom world is called Ying.
And that is Tai-ji.

So look at Tai-ji, you can see there are two states interacting with each other. The
white one and the black one gradually transformed into each other at the end. And in the center
of white and black, the opposite color is generated. In real world,
Tai-ji can represent all phenomenon that is of dualism. Such as male and female, correct and
wrong. However things would change, good thing would become bad thing as time goes by, and bad
thing also would turn good according how you look at the world. So when you are upset, dont't worry,
Tai-ji would tell you that things are going to be fine.


<<label=figbagua, echo=TRUE, eval=FALSE>>=
library(circlize)
factors = letters[1:8]  # names are not important here
par(mar = c(1, 1, 1, 1))
circos.par(default.track.height = 0.15, start.degree = 22.5, gap.degree = 6)
circos.initialize(factors = factors, xlim = c(0, 1))

circos.trackPlotRegion(ylim = c(0, 1), factors = factors, bg.border = NA,
    panel.fun = function(x, y) {
        i = get.cell.meta.data("sector.numeric.index")
        if(i %in% c(2, 5, 7, 8)) {
            circos.rect(0,0,1,1, col = "black")
        } else {
            circos.rect(0,0,0.45,1, col = "black")
            circos.rect(0.55,0,1,1, col = "black")
        }
    })

circos.trackPlotRegion(ylim = c(0, 1), factors = factors, bg.border = NA,
    panel.fun = function(x, y) {
        i = get.cell.meta.data("sector.numeric.index")
        if(i %in% c(1, 6, 7, 8)) {
            circos.rect(0,0,1,1, col = "black")
        } else {
            circos.rect(0,0,0.45,1, col = "black")
            circos.rect(0.55,0,1,1, col = "black")
        }
    })

circos.trackPlotRegion(ylim = c(0, 1), factors = factors, bg.border = NA, 
    panel.fun = function(x, y) {
        i = get.cell.meta.data("sector.numeric.index")
        if(i %in% c(4, 5, 6, 7)) {
            circos.rect(0,0,1,1, col = "black")
        } else {
            circos.rect(0,0,0.45,1, col = "black")
            circos.rect(0.55,0,1,1, col = "black")
        }
    })
    
# draw taiji
draw.sector(center = c(0, 0), start.degree = -90, end.degree = 90,
    rou1 = 0.4, col = "black", border = "black")
draw.sector(center = c(0, 0), start.degree = 90, end.degree = 270,
    rou1 = 0.4, col = "white", border = "black")
draw.sector(center = c(0, 0.2), start.degree = 0, end.degree = 360,
    rou1 = 0.2, col = "white", border = "white")
draw.sector(center = c(0, -0.2), start.degree = 0, end.degree = 360,
    rou1 = 0.2, col = "black", border = "black")
draw.sector(center = c(0, 0.2), start.degree = 0, end.degree = 360,
    rou1 = 0.05, col = "black", border = "black")
draw.sector(center = c(0, -0.2), start.degree = 0, end.degree = 360,
    rou1 = 0.05, col = "white", border = "white")

circos.clear()
@

\begin{figure}[h!]
\begin{center}
<<label=figbagua, fig = TRUE, echo=FALSE, results=hide>>=
<<figbagua>>
@
\end{center}
\caption{A Ba-gua}
\label{fig:bagua}
\end{figure}


Figure \ref{fig:painting} is a circular style of Keith Haring's great doodles. 
The circular transformation is as follows: 1. use {\tt jpeg} package to read RGB
information for each pixel in the original figure; 2. use {\tt circos.rect} to draw
every pixel into the circle. Source code for generating the figure can be found
in the demo code of the package.

It is cool, isn't it?

\begin{figure}[h!]
\centering
\includegraphics{figures/doodle.jpeg}
\caption{Keith Haring's Doodle}
\label{fig:painting}
\end{figure}


\end{document}
