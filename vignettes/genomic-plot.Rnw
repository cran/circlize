% \VignetteIndexEntry{Draw genomic figures}
% \VignetteDepends{circlize}
% \VignetteKeywords{circos R}
% \VignetteKeywords{circlize}
% \VignettePackage{circlize}

\documentclass{article}

\title{An introduction of drawing genomic figures with {\it circlize}}

\author{Zuguang Gu {\tt <z.gu@dkfz.de>}}
\usepackage[margin=1in, a4paper]{geometry}

\usepackage{Sweave}
\usepackage{hyperref}

\begin{document}

\maketitle 

\section{Introduction}

Since circos plots are mostly used in genomic research, the {\it circlize} package 
particularly provides functions which focus on genomic plots. These functions 
are synonymous to the basic circos graphical functions but expect special format of input data:

\begin{itemize}
  \item {\tt circos.genomicTrackPlotRegion}: create a new track and add graphics.
  \item {\tt circos.genomicPoints}: low-level function, add points
  \item {\tt circos.genomicLines}: low-level function, add lines
  \item {\tt circos.genomicRect}: low-level function, add rectangles
  \item {\tt circos.genomicText}: low-level function, add text
  \item {\tt circos.genomicLink}: add links
\end{itemize}

The genomic functions are implemented by basic circos functions (e.g. {\tt circos.trackPlotRegion}, {\tt circos.points}),
thus, you can customize your own plots by both genomic functions and basic circos functions.

\section{Input data}

Genomic circos functions expect input data as a data frame or a list of data frames in which there are at least three columns.
The first column is genomic category (e.g. chromosome), the second column is the start positions
in the genomic category and the third column is the end positions. Following columns are optional where
numeric values or other related values are stored. Such data structure is known as {\it BED} format and is broadly used
in genomic research.

{\it circlize} provides a simple function {\tt generateRandomBed} which can generate random genomic data. Positions are uniformly
generated from human genome. In the function, {\tt nr} and {\tt nc} are number of rows and numeric columns that users want. Please note {\tt nr}
are not always equal to the number of rows which are returned by the function. {\tt fun} is a self-defined function to generate 
random values.

<<echo=TRUE, eval=FALSE>>=
bed = generateRandomBed()
bed = generateRandomBed(nr = 200, nc = 4)
bed = generateRandomBed(fun = function(k) runif(k))
@

\section{Initialize with cytoband data}

Similar as general circos plots, the first step is to initialize the plot with genomic categories.
In most situations, genomic categories are measured by chromosomes. The easiest way is to used
{\tt circos.initializeWithIdeogram}:

<<echo=TRUE, eval=FALSE>>=
circos.initializeWithIdeogram()
@

By default, the function will initialize the plot with cytoband data of hg19. You can also use your own cytoband data
by specifying the path of your cytoband file (no matter compressed or not) or providing your cytoband data as a data frame. 
An example for cytoband file is \url{http://hgdownload.cse.ucsc.edu/goldenpath/hg19/database/cytoBand.txt.gz}.

<<echo=TRUE, eval=FALSE>>=
cytoband.file = paste(system.file(package = "circlize"),
    "/extdata/cytoBand.txt", sep = "")
circos.initializeWithIdeogram(cytoband.file)
cytoband.df = read.table(cytoband.file, colClasses = c("character", "numeric",
    "numeric", "character", "character"), sep = "\t")
circos.initializeWithIdeogram(cytoband.df)
@

If you want to read cytoband data from file, please explicitly specify {\tt colClasses} arguments and set the class
of position columns as {\tt numeric}. The reason is since positions are represented as integers, {\tt read.table} would 
treat those numbers as {\tt integer} by default. In initialization of circos plot, {\it circlize} needs to calculate the summation of
all chromosome lengths. The sumation of such large integers would throw error of data overflow.

For simple use, users can also specify abbreviation of the species and the function will download cytoband file from UCSC server
automatically (If it exists in UCSC).

<<echo=TRUE, eval=FALSE>>=
circos.initializeWithIdeogram(species = "hg18")
circos.initializeWithIdeogram(species = "mm10")
@

By default, the function will use all chromosomes which are available in cytoband data to initialize the circos plot. Users can
also choose a subset of chromosomes by specifying {\tt chromosome.index}. Please note
this argument is only used for subsetting but not for ordering.

<<echo=TRUE, eval=FALSE>>=
circos.initializeWithIdeogram(chromosome.index = c("chr1", "chr2"))
@

Initialization step is important for circos plot. It controls the order of chromosomes
which is going to be shown on the circle. There are several ways to control the order. If {\tt cytoband}
is provided as a data frame, and if the first column is a factor, the order of chromosomes
would be {\tt levels(cytoband[[1]])}. If the first column is not a factor, the order of 
chromosomes would be {\tt unique(cytoband[[1]])}. If {\tt sort.chr} is set to {\tt TRUE},
chromosomes will be sorted (first by numbers then by letters).

<<echo=TRUE, eval=FALSE>>=
cytoband = read.table(cytoband.file, colClasses = c("character", "numeric",
    "numeric", "character", "character"), sep = "\t")
circos.initializeWithIdeogram(cytoband, sort.chr = FALSE)
cytoband[[1]] = factor(cytoband[[1]], levels = paste("chr", c(22:1, "X", "Y")))
circos.initializeWithIdeogram(cytoband, sort.chr = FALSE)
cytoband = read.table(cytoband.file, colClasses = c("character", "numeric",
    "numeric", "character", "character"), sep = "\t")
circos.initializeWithIdeogram(cytoband, sort.chr = TRUE)
@

If {\tt cytoband} is specified as a file path, or {\tt species} is specified, the order of chromosomes
depends on the original order in the source file.

{\it circlize} provides a function {\tt read.cytoband} which can read/download and process cytoband data.
In fact, {\tt circos.initializeWithIdeogram} calls {\tt read.cytoband} internally. Please refer to the
help page of the function for more details.

<<echo=TRUE, eval=FALSE>>=
cytoband = read.cytoband()
cytoband = read.cytoband(file)
cytoband = read.cytoband(df)
cytoband = read.cytoband(species)
@

After the intialization of the circos plot, the function will additionally create a track where there
are genomic axes and chromosome names, and create another track where there is an ideogram.
{\tt plotType} can be used to control which graphics need to be plotted.

<<echo=TRUE, eval=FALSE>>=
circos.initializeWithIdeogram(plotType = c("axis", "labels"))
circos.initializeWithIdeogram(plotType = NULL)
@

Similar as general circos plot, the layout of circos plot can be controlled by {\tt circos.par}

<<echo=TRUE, eval=FALSE>>=
circos.par("start.degree" = 90)
circos.initializeWithIdeogram()
circos.clear()

circos.par("gap.degree" = rep(c(2, 4), 11))
circos.initializeWithIdeogram()
circos.clear()
@


\setkeys{Gin}{width=\textwidth}
\begin{figure}[h!]
\begin{center}
<<label=figinitializewithideogram, fig = TRUE, echo = FALSE, results=hide>>=
source("src/genomic-01-circos.initializeWithIdeogram.R")
@
\end{center}
\caption{Different ways to initialize genomic circos plot}
\label{fig:initializewithideogram}
\end{figure}

Please refer to figure \ref{fig:initializewithideogram} for examples of different ways
to initialize genomic circos plot.

\setkeys{Gin}{width=0.8\textwidth}

\section{Customize ideogram}

The default style of ideogram can be changed. If {\tt plotType} is set to {\tt NULL},
circos layout is only initialized but nothing is plotted. Then several new tracks can be 
created and new style of ideogram can be added by users. In the following example, we
use different colors to represent chromosomes and change the style of chromosome names (figure \ref{fig:customizeideogram}).

<<echo=TRUE, eval=FALSE>>=
circos.initializeWithIdeogram(plotType = NULL)
circos.trackPlotRegion(ylim = c(0, 1), panel.fun = function(x, y) {
    chr = get.cell.meta.data("sector.index")
    xlim = get.cell.meta.data("xlim")
    ylim = get.cell.meta.data("ylim")
    circos.rect(xlim[1], 0, xlim[2], 0.5,
        col = rgb(runif(1), runif(1), runif(1)))
    circos.text(mean(xlim), 0.9, chr, cex = 0.5, facing = "clockwise")
}, bg.border = NA)
@

\setkeys{Gin}{width=\textwidth}
\begin{figure}[h!]
\begin{center}
<<label=figcustomizeideogram, fig = TRUE, echo = FALSE, results=hide>>=
source("src/genomic-02-customize_ideogram.R")
@
\end{center}
\caption{Customize ideogram}
\label{fig:customizeideogram}
\end{figure}


\section{Initialize with general genomic category}

Cytoband data is just a special case of genomic category. {\tt circos.genomicInitialize}
can initialize circos plot with any kind of genomic categories. In fact, {\tt circos.initializeWithIdeogram}
is implemented by {\tt circos.genomicInitialize}. The input data for the function is a data frame with at least three
columns. The first column is genomic category (for cytoband data, it is chromosome name),
and the next two columns are genomic positions in each genomic category. The range of each category will be inferred from the minimun position
and the maximum position in corresponding category. In the following example, a circos plot is initialized with three genes.

<<echo=TRUE, eval=FALSE>>=
df = data.frame(
    name  = c("TP53",  "TP63",    "TP73"),
    start = c(7565097, 189349205, 3569084),
    end   = c(7590856, 189615068, 3652765))
circos.genomicInitialize(df)
@

Note it is not necessary that the record for each gene is one row.

As explained in previous section, the order of genomic categies is controlled by the first column of {\tt df}
which depends whether it is a factor or a simple vector. Alternative names can be assigned to each category
and the order of names correspond to the order of genomic categories.

<<echo=TRUE, eval=FALSE>>=
circos.genomicInitialize(df)
circos.genomicInitialize(df, sector.names = c("tp53", "tp63", "tp73"))
circos.genomicInitialize(df, plotType)

circos.par(gap.degree = 2)
circos.genomicInitialize(df)
@


\begin{figure}[h!]
\begin{center}
<<label=figgenomicinitialize, fig = TRUE, echo = FALSE, results=hide>>=
source("src/genomic-03-TPgenemodel.R")
@
\end{center}
\caption{A circos plot with three genes}
\label{fig:genomicinitialize}
\end{figure}

Figure \ref{fig:genomicinitialize} initializes a circos plot with three genes
and plots all alternative transcripts. The transcripts are drawn by {\tt circos.genomicRect}
which will be explained in following sections.

\section{Create plotting regions}

In following sections, chromosome will be used as the type of genomic category.

Similar as {\tt circos.trackPlotRegion}, {\tt circos.genomicTrackPlotRegion} also
accepts a self-defined function {\tt panel.fun} which
is applied in every cell but with different form.

<<echo=TRUE, eval=FALSE>>=
circos.genomicTrackPlotRegion(data, panel.fun = function(region, value, ...) {
    circos.genomicPoints(region, value, ...)
})
@

Inside {\tt panel.fun}, users can use low-level genomic graphical functions to add basic
graphics in each cell. {\tt panel.fun} expects two arguments {\tt region} and {\tt value}.
{\tt region} is a data frame containing start position and end position in the current chromosome which is extracted
from {\tt data}. {\tt value} is also a data frame which contains other columns in {\tt data}.
There should be a third arguments {\tt ...} which is mandatory and is used to pass user-invisible variables
to inner functions.

Since {\tt circos.genomicTrackPlotRegion} will create a new track, it needs values to
calculate range of y-values to arrange data points. Users can either specify the index of numeric columns in {\tt data} by {\tt numeric.column} (named index or numeric index)
or set {\tt ylim}. If none of them are set, the function will try to look for all numeric columns
in {\tt data} (of course, excluding the first three columns), and set them as {\tt numeric.column}.

<<echo=TRUE, eval=FALSE>>=
circos.genomicTrackPlotRegion(data, ylim = c(0, 1),
    panel.fun = function(region, value, ...) {
        circos.genomicPoints(region, value, ...)
})
circos.genomicTrackPlotRegion(data, numeric.column, 
    panel.fun = function(region, value, ...) {
        circos.genomicPoints(region, value, ...)
})
@

\subsection{Points}

{\tt circos.genomicPoints} is similar as {\tt circos.points}. The difference is {\tt circos.genomicPoints}
expects a data frame containing genomic regions and a data frame containing values. The data column for 
plotting should be indicated by {\tt numeric.column}. If the function is called
inside {\tt circos.genomicTrackPlotRegion} and users have been already set {\tt numeric.column}
in {\tt circos.genomicTrackPlotRegion}, proper value of {\tt numeric.column} will be
passed to {\tt circos.genomicPoints} through {\tt ...} in {\tt panel.fun}. Which means, you need
to add {\tt ...} as the final argument in {\tt circos.genomicPoints} to pass such information into it.
If {\tt numeric.column} is not set, {\tt circos.genomicPoints} will use all numeric columns detected in {\tt value}.

<<echo=TRUE, eval=FALSE>>=
circos.genomicPoints(region, value, ...)
circos.genomicPoints(region, value, numeric.column = c(1, 2))
circos.genomicPoints(region, value, cex, pch)
circos.genomicPoints(region, value, sector.index, track.index)
@

If there is only one numeric column, graphical parameters such as {\tt pch}, {\tt cex}
can be of length one or number of rows of {\tt region}. If there are more than
one numeric columns specified, points for each numeric column will be added iteratively,
and the graphical parameters should be either length one or number of numeric columns specified.

\subsection{Lines}

{\tt circos.genomicLines} is similar as {\tt circos.lines}. The setting of graphical parameters
is similar as {\tt circos.genomicPoints}. 

<<echo=TRUE, eval=FALSE>>=
circos.genomicLines(region, value, ...)
circos.genomicLines(region, value, numeric.column = c(1, 2))
circos.genomicLines(region, value, lwd, lty = "segment")
circos.genomicLines(region, value, area, baseline, border)
circos.genomicLines(region, value, sector.index, track.index)
@

For {\tt lty}, we additionally provide a new option {\tt segment} by which each genomic
interval will represent as a 'horizontal' line at corresponding value in {\tt value}.

\subsection{Text}

For {\tt circos.genomicText}, the position of text can be specified either by {\tt numeric.column}
or a separated vector {\tt y}. The labels of text can be specified either by {\tt labels.column}
or a vector {\tt labels}.

<<echo=TRUE, eval=FALSE>>=
circos.genomicText(region, value, ...)
circos.genomicText(region, value, y = 1, labels = "gene")
circos.genomicText(region, value, direction, adj)
circos.genomicText(region, value, sector.index, track.index)
@


\subsection{Rectangle}

For {\tt circos.genomicRect}, the positions of top and bottom of the rectangles can be
specified by {\tt ytop}, {\tt ybottom} or {\tt ytop.column}, {\tt ybottom.column}.

<<echo=TRUE, eval=FALSE>>=
circos.genomicRect(region, value, ytop = 1, ybottom = 0)
circos.genomicRect(region, value, ytop.column = 2, ybottom = 0)
circos.genomicRect(region, value, col, border)
@

One of the usage of {\tt circos.genomicRect} is to plot heatmap on the circle.
{\it circlize} provides a simple function {\tt colorRamp2} to interpolate colors. 
The arguments of {\tt colorRamp2} are break points and colors
which correspond to the the break points. {\tt colorRamp2} returns a new function
which can be used to generate new colors. 

<<echo=FALSE, eval=TRUE, incude = FALSE>>=
library(circlize)
@

<<echo=TRUE, eval=TRUE, incude = TRUE>>=
col_fun = colorRamp2(breaks = c(-1, 0, 1), colors = c("green", "black", "red"))
col_fun(c(-2, -1, -0.5, 0, 0.5, 1, 2))
@

\subsection{More details on {\tt circos.genomicTrackPlotRegion}}

The behavior of {\tt circos.genomicTrackPlotRegion} and {\tt panel.fun} 
will be different according to different input data and different settings.

\subsubsection{Normal mode}

If input data is a simple data frame, {\tt region} in {\tt panel.fun} would be a data frame
containing start position and end position in the current chromosome which is extracted
from input data. {\tt value} is also a data frame which contains columns in input data
excluding the first three columns. Index of proper numeric columns will be passed by {\tt ...}.
So if users want to use such information, they need to pass {\tt ...} to low-level
genomic function such as {\tt circos.genoimcPoints} as well.

<<echo=TRUE, eval=FALSE>>=
bed = generateRandomBed(nc = 2)
circos.genomicTrackPlotRegion(bed, numeric.column = 4, 
    panel.fun = function(region, value, ...) {
        circos.genomicPoints(region, value, ...)
        circos.genomicPoints(region, value)
        circos.genomicPoints(region, value, numeric.column = 1)
})
@

If input data is a list of data frames, {\tt panel.fun} is applied on each data frame iteratively.
Under such situation, {\tt region} and {\tt value} will contain corresponding data
in the current data frame. The numeric index for the current data frame can be get by {\tt getI(...)}.
For {\tt numeric.column} argument if input data is a data frame list, the length can only be one
or the number of data frames.

<<echo=TRUE, eval=FALSE>>=
bedlist = list(generateRandomBed(), generateRandomBed())
circos.genomicTrackPlotRegion(bedlist,
    panel.fun = function(region, value, ...) {
        i = getI(...)
        circos.genomicPoints(region, value, col = i, ...)
})
circos.genomicTrackPlotRegion(bedlist, numeric.column = c(4, 5),
    panel.fun = function(region, value, ...) {
        i = getI(...)
        circos.genomicPoints(region, value, col = i, ...)
})
@

\subsubsection{{\tt stack} mode}

{\tt circos.genomicTrackPlotRegion} also support a {\tt stack} mode. Under {\tt stack} mode,
{\tt ylim} is re-defined inside the function. The y-axis will be splitted into several parts
with equal height and graphics will be drawn on each 'horizontal' lines (y = 1, 2, ...).

Under {\tt stack} mode, when input data is a single data frame containing one or more numeric columns, 
each numeric column defined in {\tt numeric.column} will be treated as a single unit. 
{\tt ylim} is re-defined to {\tt c(0.5, n+0.5)} in which {\tt n} is number of numeric columns. 
{\tt panel.fun} will be applied iteratively on each numeric column. In each iteration, 
in {\tt panel.fun}, {\tt region} is still the genomic regions in current genomic category, 
but {\tt value} only contains current numeric column plus all non-numeric columns.
All low-level genomic graphical functions will be drawn on the 'horizontal line' {\tt y = i} 
in which {\tt i} is the index of current numeric column 
and the value of {\tt i} can be obtained by {\tt getI}.

<<echo=TRUE, eval=FALSE>>=
bed = generateRandomBed(nc = 2)
circos.genomicTrackPlotRegion(bed, stack = TRUE,
    panel.fun = function(region, value, ...) {
        i = getI(...)
        circos.genomicPoints(region, value, col = i, ...)
})
@

When input data is a list containing data frames, each data frame will be treated 
as a single unit. The situation is quite similar as described previously.
{\tt ylim} is re-defined to {\tt c(0.5, n+0.5)} in which {\tt n} is number of data frames. 
{\tt panel.fun} will be applied iteratively on each data frame. In each
iteration, in {\tt panel.fun}, {\tt region} is still the genomic regions in current 
chromosome, and {\tt value} contains columns in current data frame excluding the first three columns.
Still, graphics by low-level genomic graphical functions will be added on the 'horizontal' lines.

<<echo=TRUE, eval=FALSE>>=
bedlist = list(generateRandomBed(), generateRandomBed())
circos.genomicTrackPlotRegion(bedlist, stack = TRUE,
    panel.fun = function(region, value, ...) {
        i = getI(...)
        circos.genomicPoints(region, value, ...)
})
@

Please see figure \ref{fig:genomicpoints}, 
for examples of using different settings in {\tt circos.genomicTrackPlotRegion}.

\setkeys{Gin}{width=\textwidth}
\begin{figure}[h!]
\begin{center}
<<label=figgenomicpoints, fig = TRUE, echo = FALSE, results=hide>>=
source("src/genomic-04-genomicTrackPlotRegion.R")
@
\end{center}
\caption{Topleft: Plotting points from A) a data frame with one numeric column;
B) a data frame with one numeric column and under {\tt stack} mode; C) a list of two data frames D) a list
of two data frames under {\tt stack} mode; E) a data frame with four numeric column; F) a data frame with
four numeric column and under {\tt stack} mode. Topright: Plotting lines in different ways. Plotting lines from A) a data frame with one numeric column;
B) a list of two data frames C) a list of two data frames under {\tt stack} mode; D) a data frame with four numeric column; 
E) a data frame with four numeric column and under {\tt stack} mode. F) a data frame with one numeric column and {\tt lty}
is set to {\tt segment}. Bottomleft: Plotting rectangles in differnet ways. Plotting lines from A) a data frame with four numeric column and under {\tt stack} mode.
B) a list of two data frames under {\tt stack} mode; C) and D) adding rectangles with self-defined {\tt panel.fun}.}
\label{fig:genomicpoints}
\end{figure}
\setkeys{Gin}{width=0.8\textwidth}

\subsubsection{Mixed use of general circos functions}

{\tt panel.fun} is applied on each cell, which means, besides genomic functions, you can also use general circos functions to add more graphics.
For example, some horizontal lines and texts are added to each cell and axes are put on top of each cell:

<<echo=TRUE, eval=FALSE>>=
circos.genomicTrackPlotRegion(bed, ylim = c(-1, 1),
    panel.fun = function(region, value, ...) {
        circos.genomicPoints(region, value, ...)

        cell.xlim = get.cell.meta.data("cell.xlim")
        for(h in c(-1, -0.5, 0, 0.5, 1)) {
            circos.lines(cell.xlim, c(0, 0), lty = 2, col = "grey")
        }
        circos.text(x, y, labels)
        circos.axis("top")
})
@

\subsection{links}

{\tt circos.genomicLink} expects two data frames and it will add links from genomic
intervals in the first data frame to corresponding genomic intervals in the second
data frame (figure \ref{fig:genomiclink}).

<<echo=TRUE, eval=FALSE>>=
circos.genomicLink(bed1, bed2)
circos.genomicLink(bed1, bed2, col)
@

\begin{figure}[h!]
\begin{center}
<<label=figgenomiclink, fig = TRUE, echo = FALSE, results=hide>>=
source("src/genomic-05-genomicLink.R")
@
\end{center}
\caption{Add links from two sets of regions.}
\label{fig:genomiclink}
\end{figure}

\subsection{Highlight chromosomes}

{\tt highlight.chromosome} provides a simple way to highlight chromosomes. Just remember
to use transparent filled colors. The position of the highlighted region
and be fine-tuned by {\tt padding} argument which are percentages of corresponding height and width in the highlighted region. (figure \ref{fig:highlight})

<<echo=TRUE, eval=FALSE>>=
highlight.chromosome("chr1")
highlight.chromosome("chr1", track.index = c(2, 3))
highlight.chromosome("chr1", col = NA, border = "red")
highlight.chromosome("chr1", padding = c(0.1, 0.1, 0.1, 0.1))
@

\begin{figure}[h!]
\begin{center}
<<label=fighighlight, fig = TRUE, echo = FALSE, results=hide>>=
source("src/genomic-06-highlight.chromosome.R")
@
\end{center}
\caption{Highlight chromosomes.}
\label{fig:highlight}
\end{figure}

\section{High-level genomic functions}

{\it circlize} implements several high-level functions which may help to visualize genomic data.

\subsection{Position transformation}

There is one representative situation when genomic position transformation needs to be applied. 
For example, there are two sets of regions in a chromosome in which regions in one set regions are
quite densely to each other and regions in other set are far from others. Heatmap or text is going
to be drawn on the next track. If there is no position transformtion, heatmap or text for those
dense regions would be overlapped and hard to identify, also ugly to visualize. Thus, a way
to transform original positions to new positions would help for the visualization.

Low-level genomic functions such as {\tt circos.genomicPoints} all accept an argument {\tt posTransform}
to apply user-defined position transformation. Value for {\tt posTransform} is a self-defined function which
only accepts one argument: a data frame with two columns (start position and end position).
There is only one requirement for position transformation: Number of rows of regions 
should be the same before and after the transformation. In {\it circlize}, there already provides
a position transformation function {\tt posTransform.default} which distributes positions uniformly in current chromosome.

Since position transformation function is always executed inside low-level genomic graphical functions,
You can use {\tt get.cell.meta.data} to obtains meta information for the current chromosome.

To do the transformation:

<<echo=TRUE, eval=FALSE>>=
circos.genomicTrackPlotRegion(data, panel.fun = function(region, value, ...) {
    circos.genomicPoints(region, value, posTransform = posTransform.default, ...)
})
@

There is also a {\tt circos.genomicPosTransformLines} which add a line from untransformed regions
to transformed regions.

<<echo=TRUE, eval=FALSE>>=
circos.genomicPosTransformLines(data, posTransform = posTransform.default)
circos.genomicPosTransformLines(data, posTransform = posTransform.default,
    horizontalLine = "top")
circos.genomicPosTransformLines(data, posTransform = posTransform.default,
    type = "reverse")
@

\setkeys{Gin}{width=0.6\textwidth}
\begin{figure}[h!]
\begin{center}
<<label=figpostransform, fig = TRUE, echo = FALSE, width = 8, height = 16, results=hide>>=
source("src/genomic-07-posTransformLines.R")
@
\end{center}
\caption{Transformation of genomic positions}
\label{fig:postransform}
\end{figure}
\setkeys{Gin}{width=\textwidth}

Please see figure \ref{fig:postransform} for examples.

\subsection{Genomic density and Railfall plot}

{\tt circos.genomicDensity} calculate how much a genomic window is covered by regions in {\tt bed}.
The input data can be a single data frame or a list of data frames.

<<echo=TRUE, eval=FALSE>>=
circos.genomicDensity(bed)
circos.genomicDensity(bed, window.size = 1e6)
circos.genomicDensity(bedlist)
@

Rainfall plot can be used to visualize distribution of regions. On the plot, y-axis
corresponds to the distance to neighbour regions (log10-based). So if there is a drop-down on
the plot, it means there is a cluster of regions at that area (figure \ref{fig:rainfall}).
The input data can be a single data frame or a list of data frames.

<<echo=TRUE, eval=FALSE>>=
circos.genoimcRainfall(bed)
circos.genoimcRainfall(bedlist, col = c("red", "green"))
@

\begin{figure}[h!]
\begin{center}
<<label=figrainfall, fig = TRUE, echo = FALSE, results=hide>>=
source("src/genomic-08-rainfallplot.R")
@
\end{center}
\caption{Rainfall plot and genomic density}
\label{fig:rainfall}
\end{figure}

\end{document}
