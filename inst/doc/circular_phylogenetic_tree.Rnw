% \VignetteIndexEntry{Circular phylogenetic tree}
% \VignetteDepends{circlize}
% \VignetteKeywords{circos R}
% \VignetteKeywords{Phylogenetic tree}
% \VignetteKeywords{circlize}
% \VignettePackage{circlize}
%\VignetteCompiler{knitr}
%\VignetteEngine{knitr::knitr}

<<echo = FALSE>>=
library(knitr)
opts_chunk$set(fig.pos = "")

library(circlize)
circos.initialize = function(...) {
    circos.par(unit.circle.segments = 400)
    circlize::circos.initialize(...)
}
@

\documentclass{article}

\usepackage[T1]{fontenc}
\usepackage[sc]{mathpazo}
\renewcommand{\sfdefault}{lmss}
\renewcommand{\ttdefault}{lmtt}

\title{How to draw a phylogenetic tree}

\author{Zuguang Gu {\tt <z.gu@dkfz.de>}}
\usepackage[margin=1in, a4paper]{geometry}

\usepackage{hyperref}


\begin{document}

\maketitle 

In this short vignette, we will show how to customize the circular style of 
phylogenetic tree through \textbf{circlize} package. Basically, a phylogenetic tree is 
a dendrogram which is a combination of lines. In R, there are several classes that 
describe such type of tree such as {\tt hclust}, {\tt dendrogram} and {\tt phylo}. 
In this example, we will demonstrate how to draw the tree from the {\tt dendrogram} class. 
Nevertheless, other classes can be converted to {\tt dendrogram} without too much difficulty.

The {\tt bird.orders} data we are using here is from \textbf{ape} package. This data set is 
related to species of birds. We split the tree into six sub trees by {\tt cutree}
and convert the data into a {\tt dendrogram} object.

<<eval = FALSE>>=
library(ape)
data(bird.orders)
hc = as.hclust(bird.orders)
@

<<echo = FALSE>>=
load(paste0(system.file(package = "circlize"), "/extdata/bird.orders.RData"))
@

<<>>=
labels = hc$labels  # name of birds
ct = cutree(hc, 6)  # cut tree into 6 pieces
n = length(labels)  # number of bird species
dgm = as.dendrogram(hc)
@

The {\tt dendrogram} class stores data recursively, which means, a {\tt dendrogram} object 
contains two children nodes which are also {\tt dendrogram} objects. Thus, we can implement 
dendrogram tree in a recursive way as well.

<<>>=
dgm
attributes(dgm)
length(dgm)
dgm[[1]]
dgm[[2]]
@

For each node in the dendrogram, there are several attributes which are {\tt members}, 
{\tt midpoint}, {\tt height}, and if the node is the leaf of the tree (i.e. the end of the tree), 
there would be an binary attribute called {\tt leaf}. Here what should be noted is that 
{\tt midpoint} is the distance to its two children nodes while not the coordinate of the point.

As we mentioned in the main vignette, the x-value for the phylogenetic tree is in fact index. 
Thus, the x-lim is just the minimum and maximum index of labels in the tree. Since there is 
only one phylogenetic tree, we only need one ``big" sector. In the first track, 
we plot the name of each bird, with different colors to represent different sub trees. 

{\tt maxy} is the maximum height of tree and is used to calculate the height of the track.

<<phylogenetic_tree_part1, eval = FALSE>>=
library(circlize)
par(mar = c(1, 1, 1, 1))
circos.par(cell.padding = c(0, 0, 0, 0))
circos.initialize(factors = "a", xlim = c(0, n)) # only one sector
maxy = attr(dgm, "height")  # maximum height of the trees
circos.trackPlotRegion(ylim = c(0, 1), bg.border = NA, track.height = 0.3, 
    panel.fun = function(x, y) {
        for(i in seq_len(n)) {
            circos.text(i-0.5, 0, labels[i], adj = c(0, 0.5), 
                facing = "clockwise", niceFacing = TRUE,
                col = ct[labels[i]], cex = 0.7)
        }
})
@

In the second track, we plot the circular dendrogram. Here we implement the code 
as {\tt circos.dendrogram} in a recursive way. The {\tt draw.d} function adds lines to 
its two children nodes, and once it reaches the leaf of the tree, the recursive
execution will stop. You can see the advantage of \textbf{circlize} that if you replace 
{\tt circos.lines} to {\tt lines} in this function, then you can almost
use the same function to draw dendrogram in the regular Cartesian coordinate system without any error.

Note in following example, argument {\tt maxy} is important if you have more than one trees
that are put on a same track.

<<>>=
# == param
# -dend a `dendogram` object
# -maxy the maximum height of the tree is a global attribute,
#       so here it is set as an argument
circos.dendrogram = function(dend, maxy = attr(dend, "height")) {
    labels = as.character(labels(dend))
    x = seq_along(labels) - 0.5 # leaves are places at x = 0.5, 1.5, ..., n - 0.5
    names(x) = labels
    
    is.leaf = function(object) {
        leaf = attr(object, "leaf")
        if(is.null(leaf)) {
            FALSE
        } else {
            leaf
        }
    }
    
    draw.d = function(dend, maxy) {
        leaf = attr(dend, "leaf")
        d1 = dend[[1]]  # child tree 1
        d2 = dend[[2]]  # child tree 2
        height = attr(dend, "height")
        midpoint = attr(dend, "midpoint")
        
        if(is.leaf(d1)) {
            x1 = x[as.character(attr(d1, "label"))]
        } else {
            x1 = attr(d1, "midpoint") + x[as.character(labels(d1))[1]]
        }
        y1 = attr(d1, "height")
        
        if(is.leaf(d2)) {
            x2 = x[as.character(attr(d2, "label"))]
        } else {
            x2 = attr(d2, "midpoint") + x[as.character(labels(d2))[1]]
        }
        y2 = attr(d2, "height")
        
        # plot the connection line
        circos.lines(c(x1, x1), maxy - c(y1, height), straight = TRUE)
        circos.lines(c(x1, x2), maxy - c(height, height))
        circos.lines(c(x2, x2), maxy - c(y2, height), straight = TRUE)
        
        # do it recursively
        if(!is.leaf(d1)) {
            draw.d(d1, maxy)
        }
        if(!is.leaf(d2)) {
            draw.d(d2, maxy)
        }
    }
    
    draw.d(dend, maxy)
}
@

Finally add the circular dendrogram to the second track:

<<phylogenetic_tree_part2, eval = FALSE>>=
circos.trackPlotRegion(ylim = c(0, maxy), bg.border = NA, 
    track.height = 0.4, panel.fun = function(x, y) {
        circos.dendrogram(dgm, maxy)
})

circos.clear()
@

In figure \ref{fig:phylogenetic_tree} (top), we cut the dendrogram into six 
parts and mark the text with different colors. Once you know the basic rule for drawing such circular
dendrogram, it would be flexible to customize your figures such as adding 
bars, lines, points, or even highlighting some parts on the tree.


<<phylogenetic_tree, echo = FALSE, fig.align = "center", out.width = "0.6\\textwidth", out.height = "1.2\\textwidth", fig.width = 6, fig.height = 12, fig.cap = "A simple phylogenetic tree. Top: circular style; Bottom: normal style.">>=
par(mar = c(1, 1, 1, 1), mfrow = c(2, 1))
<<phylogenetic_tree_part1>>
<<phylogenetic_tree_part2>>
par(mar = c(8, 4, 4, 1))
plot(dgm)
@


\end{document}
