% \VignetteIndexEntry{Draw ideogram}
% \VignetteDepends{circlize}
% \VignetteKeywords{circos}
% \VignetteKeywords{ideogram}
% \VignetteKeywords{circlize}
% \VignettePackage{circlize}

\documentclass{article}

\title{How to draw ideogram}

\author{Zuguang Gu {\tt <z.gu@dkfz.de>}\\ German Cancer Research Center,\\ Heidelberg, Germany}

\usepackage{Sweave}
\usepackage{hyperref}

\begin{document}

\maketitle 

The most widely use for the circos layout is to display genomic information.
In most circumstances, figures contain an ideogram. Drawing ideogram by {\tt circlize} 
package is rather simple.

An ideogram is, in fact, a series of rectangles with different colors.
In the following example we are going to draw the ideogram for human.

The cytoband data for human can be download from \\
\url{http://hgdownload.cse.ucsc.edu/goldenPath/hg19/database/cytoBand.txt.gz}.
Uncompress the file and read it into R. Here the package already contains such file.

\begin{Schunk}
\begin{Sinput}
> library(circlize)
> d = read.table(file = paste(system.file(package = "circlize"),
+                       "/extdata/cytoBand.txt", sep=""),
+     colClasses = c("factor", "numeric", "numeric", "factor", "factor"))
> head(d)
\end{Sinput}
\begin{Soutput}
    V1       V2       V3     V4     V5
1 chr1        0  2300000 p36.33   gneg
2 chr1  2300000  5400000 p36.32 gpos25
3 chr1  5400000  7200000 p36.31   gneg
4 chr1  7200000  9200000 p36.23 gpos25
5 chr1  9200000 12700000 p36.22   gneg
6 chr1 12700000 16200000 p36.21 gpos50
\end{Soutput}
\end{Schunk}

In the data frame, the second column and the third column are intervals for loci.

Here, setting the {\tt colClasses} argument when reading the cytoband file is very important,
because the positions on chromosomes are large integers (the second column and third column),
{\tt read.table} would store such data as {\tt integer} mode. The sumation of such large integers
would throw error of data overflow. So you must set the data mode to floating point ({\tt numeric}).

Since chromosomes are sorted by their names which are as mode of {\tt character}, the order would look
like ``chr1, chr10, chr11, ..., chr2, chr20, ...''. We need to sort chromosomes by 
the numeric index first.

The process is simple. Extract the number part (1, 2, ..., 22) and the letter part ({\tt X}, {\tt Y}) of chromosome names.
Sorted them seperately and finally combine them.

\begin{Schunk}
\begin{Sinput}
> chromosome = levels(d[[1]])
> chromosome.ind = gsub("chr", "", chromosome)
> chromosome.num = grep("^\\d+$", chromosome.ind, value = TRUE)
> chromosome.letter = chromosome.ind[!grepl("^\\d+$", chromosome.ind)]
> chromosome.num = sort(as.numeric(chromosome.num))
> chromosome.letter = sort(chromosome.letter)
> chromosome.num = paste("chr", chromosome.num, sep = "")
> chromosome.letter = paste("chr", chromosome.letter, sep = "")
>
> chromosome = c(chromosome.num, chromosome.letter)
> chromosome
\end{Sinput}
\begin{Soutput}
 [1] "chr1"  "chr2"  "chr3"  "chr4"  "chr5"  "chr6"  "chr7"  "chr8"  "chr9" 
[10] "chr10" "chr11" "chr12" "chr13" "chr14" "chr15" "chr16" "chr17" "chr18"
[19] "chr19" "chr20" "chr21" "chr22" "chrX"  "chrY" 
\end{Soutput}
\end{Schunk}

The cytoband data also provides the range of each chromosome. This can be set as the {\tt xlim} of each chromosome.
In the following code, we calculate the start position and the end position of each chromosome and store them
in a matrix in which order of rows of {\tt xlim} correspond to the order of elements in {\tt chromosome}.

\begin{Schunk}
\begin{Sinput}
> xlim = matrix(nrow = 0, ncol = 2)
> for(chr in chromosome) {
+     d2 = d[d[[1]] == chr, ]
+     xlim = rbind(xlim,c(min(d2[[2]]), max(d2[[3]])))
+ }
\end{Sinput}
\end{Schunk}

Before we draw the circos layout, we need to set some graphic parameters. Here we do not need any cell paddings.

\begin{Schunk}
\begin{Sinput}
> par(mar = c(1, 1, 1, 1), lwd = 0.5)
> circos.par("cell.padding" = c(0, 0, 0, 0))
\end{Sinput}
\end{Schunk}

Initialize the circos layout with ranges of chromosomes. In the initialization step, width of 
each sector would correspond to the range of each chromosome. Also the order of sectors would
be determined in this step. Here we must explicitly
set the levels of the factors to ensure the order of chromosomes is ``chr1, chr2,
chr3, ...'' or else the order would be the character order which is ``chr1, chr11, ...''.
After the initialization step, the position of each chromosome as well as the order are stored
in an internal variable. So in the later step, as long as the chromosome is specified, graphs
would be draw in the sector which corresponds to the selected chromosome.

In the initialization step, order of the {\tt xim} matrix should correspond to the order 
of {\tt levels} of the {\tt factors}, so do not be confused here.

\begin{Schunk}
\begin{Sinput}
> circos.initialize(factors = factor(chromosome, levels = chromosome),
+     xlim = xlim)
\end{Sinput}
\end{Schunk}

After the range of each chromosome has been allocated in the circle, we can draw the ideogram.
Besides that, we also want to draw additional information such as the axis for chromosomes and the name of chromosomes. 
Here we would draw ideogram, axis and the chromosome names in one track 
(It is just an option, also you can draw ideogram, axis and names of chromosomes in different tracks). 
in the following code, we create the first track in which there are 24 cells and each cell corresponds to 
a chromosome. The x-range of each cell is the range of the chromosome and the y-range of
each cell is from 0 to 1.

There are two ways to draw the ideogram. First, create the plotting region first, and draw
ideogram cell by cell.

\begin{Schunk}
\begin{Sinput}
> circos.trackPlotRegion(factors = chromosome,
+     ylim = c(0, 1), bg.border = NA, track.height = 0.1)
\end{Sinput}
\end{Schunk}

In the above codes, it is not necessary to set the {\tt factors} argument. If {\tt factors}
is not set, {\tt circos.trackPlotRegion} will create plotting regions for all available sectors
which have already been initialized automatically. But explicitly specifying the {\tt factors}
argument would make your code more clear for reading. And the value for {\tt factors} does not
need to be a real factor. If it is not a factor, it would be converted to a factor internally.
If the value for {\tt factors} is already a factor, the level of the factor also does not need
to be specified because the cells are created by the order of chromosomes which is defined in the 
initialization step.

Now in each cell, we draw the ideogram for each chromosome. Code is simple. The steps are: for each chromosome, 1. assign different colors
for different locus, 2. draw rectangle for different locus, 3. add axis, 4. add
chromosome names.

\begin{Schunk}
\begin{Sinput}
> for(chr in chromosome) {
+     d2 = d[d[[1]] == chr, ]
+     n = nrow(d2)
+     # assign colors
+     col = rep("#FFFFFF", n)
+     col[d2[[5]] == "acen"] = "#E41A1C"
+     col[d2[[5]] == "stalk"] = "#377EB8"
+     col[d2[[5]] == "gvar"] = "#404040"
+     col[d2[[5]] == "gpos100"] = "#000000"
+     col[d2[[5]] == "gpos"] = "#000000"
+     col[d2[[5]] == "gpos75"] = "#BFBFBF"
+     col[d2[[5]] == "gpos50"] = "#808080"
+     col[d2[[5]] == "gpos25"] = "#404040"
+     # rectangles for different locus
+     for(i in seq_len(n)) {
+         circos.rect(d2[i, 2], 0, d2[i, 3], 0.4, sector.index = chr,
+              col = col[i], border = NA)
+     }
+     circos.rect(d2[1, 2], 0, d2[n, 3], 0.4, sector.index = chr,
+         border = "black")
+     # axis
+     major.at = seq(0, 10^nchar(max(xlim[, 2])), by = 50000000)
+     circos.axis(h = 0.5, major.at = major.at,
+         labels = paste(major.at/1000000, "MB", sep = ""),
+         sector.index = chr, labels.cex = 0.2)
+     cell.xlim = get.cell.meta.data("xlim", sector.index = chr)
+     # chromosome names
+     circos.text(cell.xlim[1] + mean(cell.xlim), 1.2,
+         labels = gsub("chr", "", chr),
+         sector.index = chr, cex = 0.8)
+ }
\end{Sinput}
\end{Schunk}

The second way, draw ideogram directly as the creation of the plotting region by using {\tt panel.fun} argument.
Inside {\tt panel.fun}, we do not need to set {\tt sector.index} because the default {\tt sector.index}
is the current sector index for the cell which is just created.

\begin{Schunk}
\begin{Sinput}
> circos.trackPlotRegion(factors = chromosome,
+   ylim = c(0, 1), bg.border = NA, track.height = 0.1,
+   panel.fun = function(x, y) {
+     
+     chr = get.cell.meta.data("sector.index")
+     d2 = d[d[[1]] == chr, ]
+     n = nrow(d2)
+     # assign colors
+     col = rep("#FFFFFF", n)
+     col[d2[[5]] == "acen"] = "#E41A1C"
+     col[d2[[5]] == "stalk"] = "#377EB8"
+     col[d2[[5]] == "gvar"] = "#404040"
+     col[d2[[5]] == "gpos100"] = "#000000"
+     col[d2[[5]] == "gpos"] = "#000000"
+     col[d2[[5]] == "gpos75"] = "#BFBFBF"
+     col[d2[[5]] == "gpos50"] = "#808080"
+     col[d2[[5]] == "gpos25"] = "#404040"
+     # rectangles for different locus
+     for(i in seq_len(n)) {
+         circos.rect(d2[i, 2], 0, d2[i, 3], 0.4, col = col[i], border = NA)
+     }
+     circos.rect(d2[1, 2], 0, d2[n, 3], 0.4, border = "black")
+     # axis
+     major.at = seq(0, 10^nchar(max(xlim[, 2])), by = 50000000)
+     circos.axis(h = 0.5, major.at = major.at,
+         labels = paste(major.at/1000000, "MB", sep = ""),
+         labels.cex = 0.2)
+     cell.xlim = get.cell.meta.data("xlim")
+     # chromosome names
+     circos.text(cell.xlim[1] + mean(cell.xlim), 1.2,
+         labels = gsub("chr", "", chr), cex = 0.8)
+
+ })
\end{Sinput}
\end{Schunk}

There may be some warnings saying some points are out of the plotting region. Don't worry about that,
it's just OK.

If you do not want to draw ideogram in the most outside of the circos layout. You can draw it in other tracks.

If there is a translocation from position 111111111 in chromosome 2 to position 55555555 in chromosome 16. It can represent
as a link in the circos layout.

\begin{Schunk}
\begin{Sinput}
> circos.link(sector.index1 = "chr2", point1 = 111111111,
+             sector.index2 = "chr16", point2 = 55555555)
\end{Sinput}
\end{Schunk}

If position 88888888 in chromosome 6 is important and we want to mark it, we can use following codes. First create
a new track. Here there is no specifying of {\tt factors}, thus the new track would create plotting regions for all available
sectors. Note you can not create plotting region for a single cell, however you can write so, but in fact plotting region for cells in 
all sectors would be created.

\begin{Schunk}
\begin{Sinput}
> # create a new track
> circos.trackPlotRegion(ylim = c(0, 1), bg.border = NA)
> circos.text(88888888, 0.2, labels = "site", sector.index = "chr6",
+     adj = c(0.5, 1))
> circos.lines(c(88888888, 88888888), c(0.3, 1), sector.index = "chr6",
+     straight = TRUE)
\end{Sinput}
\end{Schunk}


<<label=figideogram, include=FALSE, echo=FALSE>>=
library(circlize)
circos.initializeWithIdeogram()
circos.link(sector.index1 = "chr2", point1 = 111111111, sector.index2 = "chr16", point2 = 55555555)
circos.trackPlotRegion(ylim = c(0, 1), bg.border = NA)
circos.text(88888888, 0.2, labels = "site", sector.index = "chr6", adj = c(0.5, 1))
circos.lines(c(88888888, 88888888), c(0.3, 1), sector.index = "chr6", straight = TRUE)
@

\begin{figure}
\begin{center}
<<label=figideogram, fig = TRUE, echo = FALSE>>=
<<figideogram>>
@
\end{center}
\caption{Ideogram in circos layout}
\label{fig:ideogram}
\end{figure}

The finnal figure looks like figure \ref{fig:ideogram}.


In the {\tt circlize} package, there is already a {\tt circos.initializeWithIdeogram}
function to initialize the circos layout with an ideogram. However, how to embed the ideogram into the
circos layout is really subjective, such as the position and colors of the ideogram, 
or maybe only subset of chromosomes are going to be plotted, or maybe there are some zoomings for certain chromosomes
(see \url{http://circos.ca/intro/features/}. `GLOBAL AND LOCAL ZOOMING' section). So the {\tt circos.initializeWithIdeogram}
is not a real functional function, it is only an example function to show how to allocate sectors for chromosomes and how
to draw ideogram. Thus users can draw their style of ideogram according
the above example codes. All you need to remember is that complicated graphs are assembled by simple graphs.

Finally, more informative and specialized genomic graphs are figure \ref{fig:genomic} and figure \ref{fig:twochr}. Figure
\ref{fig:twochr} in fact combines two independent circos plots, users can refer to the main vignette to find out how to do it.

<<label=figgenomic, include=FALSE, echo=FALSE>>=
library(circlize)
set.seed(12345)

circos.initializeWithIdeogram()

circos.trackPlotRegion(ylim = c(0, 1), bg.border = NA, track.height = 0.2, panel.fun = function(x, y) {
    xlim = get.cell.meta.data("xlim")
    xrange = get.cell.meta.data("xrange")

    x1 = xlim[1] + runif(5)*xrange
    x1 = sort(x1)
    x2 = seq(xlim[1], xlim[2], length.out = 5)
    for(i in 1:5) {
        circos.lines(c(x1[i], x2[i]), c(1, 0.5), straight = TRUE)
        circos.text(x2[i], 0.4, labels = "gene", adj = c(0, 0.5), cex = 0.4, direction = "vertical_left")
    }
})


circos.trackPlotRegion(ylim = c(-1, 1), bg.border = NA, bg.col ="#EEEEEE", track.height = 0.1, panel.fun = function(x, y) {
    xlim = get.cell.meta.data("xlim")
    ylim = get.cell.meta.data("ylim")
    for(i in -2:2) {
        circos.lines(xlim, c(i, i)/2, col = "#999999", lwd = 0.2)
    }
    xrange = get.cell.meta.data("xrange")
    x = NULL
    y = NULL
    for(i in 1:5) {
        
        x2 = seq(xlim[1] + (i-1)/5*xrange, xlim[1] + (i)/5*xrange, by = 1000000)
        x = c(x, x2)
        y = c(y, runif(length(x2))^2*sample(c(-1, 1), 1))
    }
    col = ifelse(y > 0, "#E41A1C", "#4DAF4A")
    circos.points(x, y, col = col, cex = 0.2, pch = 16)
})

circos.trackPlotRegion(ylim = c(-1, 1), bg.border = NA, track.height = 0.1, panel.fun = function(x, y) {
    xlim = get.cell.meta.data("xlim")
    xrange = get.cell.meta.data("xrange")
    x = seq(xlim[1], xlim[2], by = 10000000)
    y = runif(length(x))
    circos.lines(x, y, area = TRUE, area.baseline = 0, border = NA, col = "#FF7F00")
    y = -runif(length(x))
    circos.lines(x, y, area = TRUE, area.baseline = 0, border = NA, col = "#FFFF33")
})


circos.trackPlotRegion(ylim = c(0, 1), bg.border = NA, track.height = 0.05, panel.fun = function(x, y) {
    xlim = get.cell.meta.data("xlim")
    xrange = get.cell.meta.data("xrange")
    x = seq(xlim[1], xlim[2], by = 10000000)
    for(i in seq_along(x)) {
        if(i == 1) {
            next
        }
        circos.rect(x[i-1], 0, x[i], 1, col = rgb(runif(1), runif(1), runif(1)), border = NA)
    }
})

chromosome = paste("chr", c(1:22, "X", "Y"), sep = "")
for(i in 1:50) {
    chr = sample(chromosome, 2)
    xlim1 = get.cell.meta.data("xlim", sector.index = chr[1], track.index = 1)
    xrange1 = get.cell.meta.data("xrange", sector.index = chr[1], track.index = 1)
    xlim2 = get.cell.meta.data("xlim", sector.index = chr[2], track.index = 1)
    xrange2 = get.cell.meta.data("xrange", sector.index = chr[2], track.index = 1)
    
    r = runif(2)
    if(abs(r[1] - r[2]) < 0.2) {
        x1 = c(xlim1[1] + r[1]*xrange1, xlim1[1] + r[2]*xrange1)
    } else {
        x1 = c(xlim1[1] + r[1]*xrange1)
    }
    
    r = runif(2)
    if(abs(r[1] - r[2]) < 0.2) {
        x2 = c(xlim2[1] + r[1]*xrange2, xlim2[1] + r[2]*xrange2)
    } else {
        x2 = c(xlim2[1] + r[1]*xrange2)
    }
    
    
    circos.link(chr[1], x1, chr[2], x2, col = sample(c('#9E0142', '#D53E4F', '#F46D43', '#FDAE61', '#FEE08B', '#FFFFBF', '#E6F598', '#ABDDA4', '#66C2A5', '#3288BD', '#5E4FA2'), 1))
}

degree = get.cell.meta.data("xplot", sector.index = "chr1", track.index = 1)
start.degree = degree[1]
end.degree = degree[2]
rou1 = get.cell.meta.data("yplot", sector.index = "chr1", track.index = 1)[2]
rou2 = get.cell.meta.data("yplot", sector.index = "chr1", track.index = 5)[1]

draw.sector(center = c(0, 0), start.degree = start.degree, end.degree = end.degree,
            rou1 = rou1+0.05, rou2 = rou2-0.01, col = "#FF000020", border = NA)
circos.clear()
@

\begin{figure}
\begin{center}
<<label=figgenomic, fig = TRUE, echo = FALSE>>=
<<figgenomic>>
@
\end{center}
\caption{detailed genomic graph}
\label{fig:genomic}
\end{figure}





<<label=figtwo, include=FALSE, echo=FALSE>>=

library(circlize)
circos.clear()

circos.initializeWithIdeogram()
circos.link("chr1", 12345678, "chr1", 87654321, top.ratio = 0.8)
circos.link("chr1", 22222222, "chr1", 99999999, top.ratio = 0.8)
circos.clear()

d = read.table(file = paste(system.file(package = "circlize"), "/extdata/cytoBand.txt", sep=""), colClasses = c("factor", "numeric", "numeric", "factor", "factor"))

    chromosome = c("chr1")
    
    xlim = matrix(nrow = 0, ncol = 2)
    for(chr in chromosome) {
        d2 = d[d[[1]] == chr, ]
        xlim = rbind(xlim,c(min(d2[[2]]), max(d2[[3]])))
    }
    
    circos.clear()
    par(mar = c(1, 1, 1, 1), new = TRUE)
    
    circos.par("canvas.xlim" = c(-2, 2), "canvas.ylim" = c(-2, 2), clock.wise = FALSE, start.degree = -90)
    circos.initialize(factor(chromosome, levels = chromosome), xlim = xlim)
    circos.trackPlotRegion(factors = factor(chromosome, levels = chromosome), ylim = c(0, 1), bg.border = NA, track.height = 0.2)
    for(chr in chromosome) {
        d2 = d[d[[1]] == chr, ]
        n = nrow(d2)
        col = rep("#FFFFFF", n)
        col[d2[[5]] == "acen"] = "#E41A1C"
        col[d2[[5]] == "stalk"] = "#377EB8"
        col[d2[[5]] == "gvar"] = "#404040"
        col[d2[[5]] == "gpos100"] = "#000000"
        col[d2[[5]] == "gpos"] = "#000000"
        col[d2[[5]] == "gpos75"] = "#BFBFBF"
        col[d2[[5]] == "gpos50"] = "#808080"
        col[d2[[5]] == "gpos25"] = "#404040"
        for(i in seq_len(n)) {
            circos.rect(d2[i, 2], 0, d2[i, 3], 0.4, sector.index = chr, col = col[i], border = NA)
        }
        circos.rect(d2[1, 2], 0, d2[n, 3], 0.4, sector.index = chr, border = "black")
        major.at = seq(0, 10^nchar(max(xlim[, 2])), by = 10000000)
        circos.axis(h = 0.5, major.at = major.at, labels = paste(major.at/1000000, "MB", sep = ""), sector.index = chr, labels.cex = 0.4, labels.direction = "vertical_left")
        cell.xlim = get.cell.meta.data("xlim", sector.index = chr)
        circos.text(cell.xlim[1] + mean(cell.xlim), -0.5, labels = chr, sector.index = chr, cex = 0.8)
                circos.link("chr1", 12345678, "chr1", 87654321)
                circos.link("chr1", 22222222, "chr1", 99999999)
    }
    
@

\begin{figure}
\begin{center}
<<label=figtwo, fig = TRUE, echo = FALSE>>=
<<figtwo>>
@
\end{center}
\caption{two tracks of chromosomes}
\label{fig:twochr}
\end{figure}

\end{document}
