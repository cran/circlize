% \VignetteIndexEntry{Draw ideogram}
% \VignetteDepends{circlize}
% \VignetteKeywords{circos R}
% \VignetteKeywords{ideogram}
% \VignetteKeywords{circlize}
% \VignettePackage{circlize}
%\VignetteCompiler{knitr}
%\VignetteEngine{knitr::knitr}

<<echo = FALSE>>=
library(knitr)
opts_chunk$set(fig.pos = "")

library(circlize)
circos.initialize = function(...) {
    circos.par(unit.circle.segments = 300)
    circlize::circos.initialize(...)
}
@

\documentclass{article}

\usepackage[T1]{fontenc}
\usepackage[sc]{mathpazo}
\renewcommand{\sfdefault}{lmss}
\renewcommand{\ttdefault}{lmtt}

\title{How to draw ideogram}

\author{Zuguang Gu {\tt <z.gu@dkfz.de>}}
\usepackage[margin=1in, a4paper]{geometry}

\usepackage{hyperref}

\begin{document}

\maketitle 

{\bf There is a new and more comprehensive vignette in this package which is focusing 
on genomic graphics. Nevertheless, this vignette is still useful for users to 
get a clue on how to draw genomic graphics by very basic low-level functions.}

\vbox{}

The most widely use of the circular layout is to display genomic information.
In most circumstances, figure contains an ideogram. Drawing ideogram by \textbf{circlize} 
package is simple.

An ideogram is, in fact, a series of rectangles with different colors, so theoretically, you
can use {\tt circos.rect} to implement it. In the following example we draw the ideogram 
for human. The cytoband data for human can be downloaded from
\url{http://hgdownload.soe.ucsc.edu/goldenPath/hg19/database/cytoBand.txt.gz} or
from UCSC Table Browser (\url{http://genome-euro.ucsc.edu/cgi-bin/hgTables}).
Uncompress the file and read it into R. Here \textbf{circlize} package already contains such file.

<<>>=
library(circlize)
d = read.table(file = paste0(system.file(package = "circlize"), "/extdata/cytoBand.txt"),
    colClasses = c("character", "numeric", "numeric", "character", "character"))
head(d)
@

In the data frame, the second column and the third column correspond to the intervals 
for cytogenetic bands.

Here, setting {\tt colClasses} argument when reading the cytoband file is very important.
Because positions on chromosomes are represented as large integers (the second column and third column),
by default, {\tt read.table} would store such data as {\tt integer} mode. When arranging the layout, \textbf{circlize} will sum up such positions
to determine the range of chromosomes and summation of such large integers
would throw error of data overflow, thus you must set the data mode to floating point ({\tt numeric}).

Since chromosomes are sorted by their names which are as mode of {\tt character}, the default order would look
like ``chr1, chr10, chr11, ..., chr2, chr20, ...''. We need to sort chromosomes by 
the numeric index first.

The process is simple. Extract the number part (1, 2, ..., 22) and the letter part ({\tt X}, {\tt Y}) in chromosome names.
Sorted them separately and finally combine them back.

<<>>=
chromosome = unique(d[[1]])
chromosome.ind = gsub("chr", "", chromosome)
chromosome.num = grep("^\\d+$", chromosome.ind, value = TRUE)
chromosome.letter = chromosome.ind[!grepl("^\\d+$", chromosome.ind)]
chromosome.num = sort(as.numeric(chromosome.num))
chromosome.letter = sort(chromosome.letter)
chromosome.num = paste("chr", chromosome.num, sep = "")
chromosome.letter = paste("chr", chromosome.letter, sep = "")

chromosome = c(chromosome.num, chromosome.letter)
chromosome
@

The cytoband data also provides the range of each chromosome. This can be used to set as 
{\tt xlim} of each chromosome. In the following code, we calculate the start position 
and the end position of each chromosome and store them in a matrix in which order of rows 
of {\tt xlim} correspond to the order of elements in {\tt chromosome}.

<<>>=
xlim = matrix(nrow = 0, ncol = 2)
for(chr in chromosome) {
    d2 = d[d[[1]] == chr, ]
    xlim = rbind(xlim, c(min(d2[[2]]), max(d2[[3]])))
}
@

Note that chromosome name in UCSC has prefix of `chr', so if you are using chromosomes 
form 1000 Genome project which have no 'chr' prefix, remember to add it.

Before initializing the circular layout, we need to set some graphic parameters. 
Here we do not need any cell paddings and we do not need lines to be too thick 
because genomic graphics are always huge.

<<ideogram_basic_trunk1, eval = FALSE>>=
par(lwd = 0.5)
circos.par(cell.padding = c(0, 0, 0, 0))
@

In the initialization step, width of each sector corresponds to the length of each chromosome. 
Also the order of sectors is determined in this step. Here we must explicitly
set the levels of the factors to make sure the order of chromosomes is ``chr1, chr2,
chr3, ...'' or else the order would be the alphabetical which is ``chr1, chr11, ...''.
After the initialization step, the position of each chromosome as well as the order are stored
in an internal variable. So in the later step, as long as the chromosome is specified, graphics
will be put in the right sector.

<<ideogram_basic_trunk2, eval = FALSE>>=
circos.initialize(factors = factor(chromosome, levels = chromosome), xlim = xlim)
@

After each chromosome has been allocated in the circle, we can draw the ideogram.
Besides that, we also want to draw additional information such as axes and names of chromosomes. 
Here we will draw ideogram, axis and the chromosome names in one same track 
(It is just an option, also you can draw ideogram, axes and names of chromosomes in different tracks as you like). 
in the following code, we create the first track in which there are 24 cells and each cell corresponds to 
a chromosome. The x-range of each cell is the range of the chromosome and the y-range of
each cell is from 0 to 1.

<<ideogram_basic_trunk3, eval = FALSE>>=
circos.trackPlotRegion(ylim = c(0, 1), bg.border = NA, track.height = 0.1)
@

In the above codes, without specifying {\tt factors} argument, {\tt circos.trackPlotRegion} 
will automatically create plotting regions for all available sectors which have already been initialized. 

Now in each cell, we draw the ideogram for each chromosome. Code is simple. The steps are: 
for each chromosome:

\begin{enumerate}
 \item assign different colors for different cytogenetic bands;
 \item draw rectangle for different bands;
 \item add axes;
 \item add chromosome names. 
\end{enumerate}

Here the color theme is from \url{http://circos.ca/tutorials/course/slides/session-2.pdf}, page 42.

<<ideogram_basic_trunk4, eval = FALSE>>=
for(chr in chromosome) {
    # data in current `chr`
    d2 = d[d[[1]] == chr, ]
    n = nrow(d2)
    
    # assign colors
    col = rep("#FFFFFF", n)
    col[d2[[5]] == "gpos100"] = rgb(0, 0, 0, maxColorValue = 255)
    col[d2[[5]] == "gpos"]    = rgb(0, 0, 0, maxColorValue = 255)
    col[d2[[5]] == "gpos75"]  = rgb(130, 130, 130, maxColorValue = 255)
    col[d2[[5]] == "gpos66"]  = rgb(160, 160, 160, maxColorValue = 255)
    col[d2[[5]] == "gpos50"]  = rgb(200, 200, 200, maxColorValue = 255)
    col[d2[[5]] == "gpos33"]  = rgb(210, 210, 210, maxColorValue = 255)
    col[d2[[5]] == "gpos25"]  = rgb(200, 200, 200, maxColorValue = 255)
    col[d2[[5]] == "gvar"]    = rgb(220, 220, 220, maxColorValue = 255)
    col[d2[[5]] == "gneg"]    = rgb(255, 255, 255, maxColorValue = 255)
    col[d2[[5]] == "acen"]    = rgb(217, 47, 39, maxColorValue = 255)
    col[d2[[5]] == "stalk"]   = rgb(100, 127, 164, maxColorValue = 255)
    
    # rectangles for different locus
    for(i in seq_len(n)) {
        circos.rect(d2[i, 2], 0, d2[i, 3], 0.4, sector.index = chr,
            col = col[i], border = NA)
    }
    # rectangle that cover the whole chromosome
    circos.rect(d2[1, 2], 0, d2[n, 3], 0.4, sector.index = chr, border = "black")
        
    # axis
    major.at = seq(0, 10^nchar(max(xlim[, 2])), by = 50000000)
    circos.axis(h = 0.5, major.at = major.at,
        labels = paste(major.at/1000000, "MB", sep = ""),
        labels.facing = "clockwise", labels.niceFacing = TRUE,
        sector.index = chr, labels.cex = 0.2)
    chr.xlim = get.cell.meta.data("xlim", sector.index = chr)
    
    # chromosome names, only the number part or the letter part
    circos.text(mean(chr.xlim), 1.2, labels = gsub("chr", "", chr),
        sector.index = chr, cex = 0.8)
}
@

In the above code, you can find the {\tt ylim} for the cells in the first track is {\tt c(0, 1)}
and the y-value in {\tt circos.text} is {\tt 1.2} which exceeds the {\tt ylim}. 
There may be some warnings saying some points are out of the plotting region. But in fact it is OK
to draw something outside the plotting regions. You just need to make sure the final figure looks good.

If you do not want to draw ideogram in the most outside of the circos layout. You can draw it in other tracks as you wish.

As we introduced in the main vignettes, code in the {\tt for} loop can also be put inside
{\tt panel.fun} when calling {\tt circos.trackPlotRegion}.

If there is a translocation from position 111111111 in chromosome 2 to position 55555555 in chromosome 16. It can represent
as a link in the circular layout.

<<ideogram_basic_trunk5, eval = FALSE>>=
circos.link("chr2", 111111111, "chr16", 55555555)
@

If position 88888888 in chromosome 6 is important and we want to mark it, we can first create
a new track and add line and text in the specified cell. Note this track will overlap with
the link which we added before, but since {\tt bg.border} is set to {\tt NA}, nothing
will be plotted for this invisible track.

<<ideogram_basic_trunk6, eval = FALSE>>=
# create a new track
circos.trackPlotRegion(ylim = c(0, 1), bg.border = NA)
circos.text(88888888, 0.2, labels = "site", sector.index = "chr6", adj = c(0.5, 1))
circos.lines(c(88888888, 88888888), c(0.3, 1), sector.index = "chr6", straight = TRUE)
@

Finally, don't forget to call {\tt circos.clear} in the end.

<<ideogram_basic_trunk7, eval = FALSE>>=
circos.clear()
@


<<ideogram_basic, echo = FALSE, fig.align = "center", out.width = "0.8\\textwidth", fig.cap = "Ideogram in circular layout.">>=
circos.par(points.overflow.warning = FALSE)
<<ideogram_basic_trunk1>>
<<ideogram_basic_trunk2>>
<<ideogram_basic_trunk3>>
<<ideogram_basic_trunk4>>
<<ideogram_basic_trunk5>>
<<ideogram_basic_trunk6>>
<<ideogram_basic_trunk7>>
@


For other tracks of genomic graphics, the genomic coordinate (positions on chromosomes) are x-values and measurements on
genomic positions are y-values.


The final figure is figure \ref{fig:ideogram_basic}.


\end{document}
